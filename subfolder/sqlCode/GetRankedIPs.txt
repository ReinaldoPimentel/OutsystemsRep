WITH AllIPNames AS (
    /* Base CTE that retrieves all IP records with their status information
       and extracts version components (Major, Minor, Revision, SubRevision) from the IPRevision field */
    SELECT 
        {IP}.[IPId]
        , {IP}.[IPName]
        , {IP}.[IPRevision]
        , {IP}.[IPStatusId]
        , {IPStatus}.[Label] as StatusLabel
        , {IPStatus}.[Color] as StatusColor
        , {IP}.[ReleaseDate]
        , {IP}.[Technology]
        , {IP}.[MetalLayers]
        , {IP}.[IPMetalTopologyString]
        , {IP}.[CustomIPRevFamily]
        , {IP}.[NewRev]
        
        /* Complex version number parsing logic */
        /* Major version: first part before first dot (e.g., "1" in "1.2.3_04") */
        , CASE 
            /* Check if the first part contains only digits (after normalizing and splitting) */
            WHEN SPLIT_PART(SPLIT_PART(caseaccent_normalize(IPRevision collate "default"), '_', 1), '.', 1) ~ '^[0-9]+$' 
            /* If valid number, cast to integer */
            THEN CAST(SPLIT_PART(SPLIT_PART(caseaccent_normalize(IPRevision collate "default"), '_', 1), '.', 1) AS INTEGER)
            /* Otherwise default to 0 */
            ELSE 0 
        END AS Major
        
        /* Minor version: second part between dots (e.g., "2" in "1.2.3_04") */
        , CASE 
            WHEN SPLIT_PART(SPLIT_PART(caseaccent_normalize(IPRevision collate "default"), '_', 1), '.', 2) ~ '^[0-9]+$' 
            THEN CAST(SPLIT_PART(SPLIT_PART(caseaccent_normalize(IPRevision collate "default"), '_', 1), '.', 2) AS INTEGER)
            ELSE 0 
        END AS Minor
        
        /* Revision: third part after second dot (e.g., "3" in "1.2.3_04") */
        , CASE 
            WHEN SPLIT_PART(SPLIT_PART(caseaccent_normalize(IPRevision collate "default"), '_', 1), '.', 3) ~ '^[0-9]+$' 
            THEN CAST(SPLIT_PART(SPLIT_PART(caseaccent_normalize(IPRevision collate "default"), '_', 1), '.', 3) AS INTEGER)
            ELSE 0 
        END AS Revision
        
        /* SubRevision: part after underscore (e.g., "04" in "1.2.3_04") */
        , CASE 
            /* Check if underscore exists in the version string */
            WHEN COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) > 0 
            THEN
                CASE 
                    /* Extract 2 characters after underscore and check if they're digits */
                    WHEN SUBSTRING((caseaccent_normalize(IPRevision collate "default")) FROM COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) + 1 FOR 2) ~ '^[0-9]+$'
                    THEN CAST(SUBSTRING((caseaccent_normalize(IPRevision collate "default")) FROM COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) + 1 FOR 2) AS INTEGER)
                    ELSE 0
                END
            ELSE 0 
        END AS SubRevision
    FROM {IP}
    INNER JOIN {IPStatus} ON {IP}.[IPStatusId] = {IPStatus}.[Id]
    /* Dynamic filtering based on search text (applied to multiple fields) */
    WHERE (@UseSearchText = 0 OR caseaccent_normalize({IP}.[IPName] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
                              OR caseaccent_normalize({IP}.[IPRevision] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
                              OR caseaccent_normalize({IP}.[CustomIPRevFamily] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
                              OR caseaccent_normalize({IP}.[Technology] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
                              OR caseaccent_normalize({IP}.[MetalLayers] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
                              OR caseaccent_normalize({IP}.[IPMetalTopologyString] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
                              OR caseaccent_normalize({IP}.[NewRev] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
                              OR caseaccent_normalize({IPStatus}.[Label] collate "default") LIKE caseaccent_normalize('%' || @SafeSearchText::text || '%')
            )
        /* Optional filter by status IDs */
        AND (@UseStatusCSV = 0 OR {IP}.[IPStatusId] IN (@SafeStatusCSV))
        
),
ValidIPs AS (
    /* Filters out obsolete IPs unless explicitly requested via @UseStatusCSV */
    SELECT * 
    FROM AllIPNames
    WHERE (@UseStatusCSV = 1 OR IPStatusId NOT IN (@ObsoleteIPStatusId, @TapeoutNotAllowedIPStatusId))

),
RankedIPs AS (
    /* Ranks IPs within each family group based on version and status */
    SELECT 
        IPID
        , IPName
        , IPRevision
        , IPStatusId
        , StatusLabel
        , StatusColor
        , ReleaseDate
        , Technology
        , MetalLayers
        , IPMetalTopologyString
        , CustomIPRevFamily
        , NewRev
        /* Calculate a numeric score for version comparison (e.g., 1.2.3 becomes 10203) */
        , (Major * 10000) + (Minor * 100) + Revision AS RevisionScore
        
        /* Assign priority groups to statuses for ranking */
        , CASE 
            /* Highest priority statuses (verified/production) */
            WHEN IPStatusId IN (@PreSiliconCP3IPStatusId, @SiliconVerifiedIPStatusId, @ProductionSiliconIPStatusId) THEN 2
            /* Medium priority statuses (under development) */
            WHEN IPStatusId IN (@NewIPplaceholderCP0IPStatusId, @PreliminaryCP1IPStatusId, @UnderDevelopmentCP2IPStatusId, @TapeoutRiskIPStatusId) THEN 1
            /* Lowest priority */
            ELSE 0
        END AS StatusPriority
        
        /* Rank IPs within each family group */
        , ROW_NUMBER() OVER (
            PARTITION BY 
                IPName
                , Technology
                , MetalLayers
                , COALESCE(IPMetalTopologyString, '')
                , CustomIPRevFamily
            ORDER BY 
                /* Primary sort by version number (calculated score) */
                (Major * 10000) + (Minor * 100) + Revision DESC,
                /* Then by status priority */
                CASE 
                    WHEN IPStatusId IN (@PreSiliconCP3IPStatusId, @SiliconVerifiedIPStatusId, @ProductionSiliconIPStatusId) THEN 2
                    WHEN IPStatusId IN (@NewIPplaceholderCP0IPStatusId, @PreliminaryCP1IPStatusId, @UnderDevelopmentCP2IPStatusId, @TapeoutRiskIPStatusId) THEN 1
                    ELSE 0
                END DESC
                /* Then by sub-revision (part after underscore) */
                , CASE 
                    WHEN COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) > 0 THEN
                        CASE 
                            WHEN SUBSTRING((caseaccent_normalize(IPRevision collate "default")) FROM COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) + 1 FOR 2) ~ '^[0-9]+$'
                            THEN CAST(SUBSTRING((caseaccent_normalize(IPRevision collate "default")) FROM COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) + 1 FOR 2) AS INTEGER)
                            ELSE 0
                        END
                    ELSE 0 
                END DESC
                /* Finally by release date (older first) */
                , ReleaseDate ASC
        ) AS FamilyRank
        
        /* Identify the main IP ID for each family group */
        , FIRST_VALUE(IPID) OVER (
            PARTITION BY 
                IPName
                , Technology
                , MetalLayers
                , COALESCE(IPMetalTopologyString, '')
                , CustomIPRevFamily
            ORDER BY 
                /* Same ordering logic as above */
                (Major * 10000) + (Minor * 100) + Revision DESC,
                CASE 
                    WHEN IPStatusId IN (@PreSiliconCP3IPStatusId, @SiliconVerifiedIPStatusId, @ProductionSiliconIPStatusId) THEN 2
                    WHEN IPStatusId IN (@NewIPplaceholderCP0IPStatusId, @PreliminaryCP1IPStatusId, @UnderDevelopmentCP2IPStatusId, @TapeoutRiskIPStatusId) THEN 1
                    ELSE 0
                END DESC
                , CASE 
                    WHEN COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) > 0 THEN
                        CASE 
                            WHEN SUBSTRING((caseaccent_normalize(IPRevision collate "default")) FROM COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) + 1 FOR 2) ~ '^[0-9]+$'
                            THEN CAST(SUBSTRING((caseaccent_normalize(IPRevision collate "default")) FROM COALESCE(POSITION('_' IN (caseaccent_normalize(IPRevision collate "default"))),0) + 1 FOR 2) AS INTEGER)
                            ELSE 0
                        END
                    ELSE 0 
                END DESC
                , ReleaseDate ASC
        ) AS MainIPID
    FROM ValidIPs
),
RankedIPsIndex AS (
    /* Adds pagination support by calculating row numbers and total count */
    SELECT *
        , ROW_NUMBER() OVER (
            /* Dynamic sorting based on @SortBy parameter */
            ORDER BY @SortBy
             ) - 1 AS RankedMainIndex
        , COUNT(*) OVER () AS TotalCount
    FROM RankedIPs
    /* Only include the top-ranked IP from each family group */
    WHERE RankedIPs.FamilyRank = 1

),
FullList AS (
    /* Combines all data with additional flags for UI presentation */
    SELECT 
        0 AS IsSelected
        , ValidIPs.IPID
        , ValidIPs.IPName
        , ValidIPs.IPRevision
        , ValidIPs.StatusLabel
        , ValidIPs.ReleaseDate
        , ValidIPs.CustomIPRevFamily
        , ValidIPs.Technology
        , ValidIPs.MetalLayers
        , RankedIPs.FamilyRank
        , COALESCE(ValidIPs.IPMetalTopologyString, '') AS IPMetalTopologyString
        , ValidIPs.StatusColor
        , ValidIPs.NewRev AS NewRevision
        /* Flag for group headers (top-ranked IPs) */
        , CASE WHEN RankedIPs.FamilyRank = 1 THEN 1 ELSE 0 END AS IsGroupHeader
        , 1 AS IsCollapsed
        /* Flag for latest version in family */
        , CASE WHEN RankedIPs.FamilyRank = 1 THEN 1 ELSE 0 END AS IsLatest
        , RankedIPs.MainIPID

    FROM RankedIPs
    INNER JOIN ValidIPs ON RankedIPs.IPID = ValidIPs.[IPId]
)
/* Final result with pagination and optional IP ID filtering */
SELECT 
    IsSelected
    , FullList.IPID
    , FullList.IPName
    , FullList.IPRevision
    , FullList.StatusLabel
    , FullList.ReleaseDate
    , FullList.CustomIPRevFamily
    , FullList.Technology
    , FullList.MetalLayers
    , FullList.IPMetalTopologyString
    , FullList.StatusColor
    , FullList.NewRevision
    , FullList.IsGroupHeader
    , FullList.IsCollapsed
    , FullList.IsLatest
    , FullList.FamilyRank AS Index
    , RankedMainIndex
    , FullList.MainIPID
    , TotalCount

FROM FullList
INNER JOIN RankedIPsIndex ON FullList.MainIPID = RankedIPsIndex.MainIPID
/* Pagination filters */
WHERE RankedMainIndex >= @MinIndex 
    AND  RankedMainIndex < @MaxIndex
    /* Optional filter for specific IP ID details */
    AND (@IsIPIDDetails = 0 OR FullList.MainIPID = @IPID)
/* Final sorting by pagination index and family rank */
ORDER BY RankedMainIndex, Index ASC